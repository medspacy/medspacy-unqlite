name: build_publish
on:
  workflow_dispatch:
    inputs:
      python_versions:
        description: 'Python versions to build (JSON array)'
        default: '["cp38", "cp39", "cp310", "cp311", "cp312", "cp313"]'
        required: true
      build_platforms:
        description: 'Build platforms to use (JSON array of [runner, platform] pairs)'
        default: '[["ubuntu-latest", "manylinux_x86_64"], ["ubuntu-latest", "musllinux_x86_64"], ["macos-13", "macosx_x86_64"], ["macos-latest", "macosx_arm64"], ["windows-latest", "win_amd64"], ["windows-2019", "win32"]]'
        required: true
  push:
    tags:
      - '*' 
    

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Build wheels for all platforms and Python versions
        buildplat: ${{ fromJSON(github.event.inputs.build_platforms || '[["ubuntu-latest", "manylinux_x86_64"], ["ubuntu-latest", "musllinux_x86_64"], ["macos-13", "macosx_x86_64"], ["macos-latest", "macosx_arm64"], ["windows-latest", "win_amd64"], ["windows-2019", "win32"]]') }}
        python: ${{ fromJSON(github.event.inputs.python_versions || '["cp38", "cp39", "cp310", "cp311", "cp312", "cp313"]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Cache cibuild
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-cibuilds
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: /var/lib/docker/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Print all build identifiers
        shell: bash
        run: |
          pipx run cibuildwheel --print-build-identifiers
          if [ -d "wheelhouse" ]; then
            echo "Clearing wheelhouse directory..."
            rm -rf wheelhouse/*
          fi

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          # TODO: Build Cython with the compile-all flag?
          # Unfortunately, there is no way to modify cibuildwheel's build command
          # so there is no way to pass this in directly.
          # This would require modifying cython's setup.py to look for these flags
          # in env vars.
          CIBW_BEFORE_BUILD: "pip install Cython"
          # CIBW_BEFORE_BUILD: "python setup.py build_ext --inplace"
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_ENVIRONMENT: CFLAGS='-O3 -g0 -mtune=generic -pipe -fPIC' LDFLAGS='-fPIC'          
          CIBW_TEST_COMMAND: python {package}/tests.py

      - name: check build
        run: |
          ls -l wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout quicksectx
        uses: actions/checkout@v4
      # Used to push the built wheels
      - uses: actions/setup-python@v4
        with:
          # Build sdist on lowest supported Python
          python-version: '3.8.x'
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install Cython build
          if [ -d "dist" ]; then
            echo "Clearing wheelhouse directory..."
            rm -rf dist/*
          fi

      - name: Build sdist
        run: |
          python -m build --sdist --outdir dist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./dist/*.tar.gz

  publish:
    name: Publish to PyPI & Release
    needs: [build_wheels, build_sdist]
    # Only run on tags or manually
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/medspacy_unqlite
    permissions:
      id-token: write
      contents: write


    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          
      - name: Move wheels to dist directory
        run: |
          ls -l -a dist
          mkdir -p dist_flat
          find dist -type f \( -name "*.whl" -o -name "medspacy*.tar.gz" \)
          find dist -type f \( -name "*.whl" -o -name "medspacy*.tar.gz" \) -exec cp {} dist_flat/ \;
          ls -l dist_flat/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: dist_flat/
          skip-existing: true

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: ./dist_flat/*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}


