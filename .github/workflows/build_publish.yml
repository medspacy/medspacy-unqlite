name: build_publish
on:
  workflow_dispatch




concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
          - [ubuntu-latest, manylinux_x86_64]
          - [ubuntu-latest, musllinux_x86_64]
          - [macos-13, macosx_x86_64]
          - [macos-latest, macosx_arm64]
          - [windows-latest, win_amd64]
          - [windows-2019, win32]
        python: ["cp38", "cp39", "cp310", "cp311", "cp312", "cp313"]
        # python: ["cp38"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Cache cibuild
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-cibuilds
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: /var/lib/docker/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Print all build identifiers
        run: |
          pipx run cibuildwheel --print-build-identifiers

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          # TODO: Build Cython with the compile-all flag?
          # Unfortunately, there is no way to modify cibuildwheel's build command
          # so there is no way to pass this in directly.
          # This would require modifying cython's setup.py to look for these flags
          # in env vars.
          CIBW_BEFORE_BUILD: "pip install Cython"
          # CIBW_BEFORE_BUILD: "python setup.py build_ext --inplace"
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_ENVIRONMENT: CFLAGS='-O3 -g0 -mtune=generic -pipe -fPIC' LDFLAGS='-fPIC'          
          CIBW_TEST_COMMAND: python {package}/tests.py

      - name: check build
        run: |
          ls -l wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout quicksectx
        uses: actions/checkout@v4
      # Used to push the built wheels
      - uses: actions/setup-python@v4
        with:
          # Build sdist on lowest supported Python
          python-version: '3.8.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Cython

      - name: Build sdist
        run: |
          python setup.py sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
  #    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          pip install twine

      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: check downloaded
        shell: bash
        run: |
          ls -l dist
          mkdir -p clean_dist
          find dist -type f \( -name "*.whl" -o -name "*.tar.gz" \)
          find dist -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec mv {} clean_dist/ \;
          ls -l clean_dist

      - name: Build and publish
        run: |
          twine check clean_dist/*
          twine upload --skip-existing --verbose clean_dist/*
        env:
  #          TWINE_REPOSITORY: testpypi   # uncomment this line for test
  #         need to add Pypi token in secrets under the github repo's setting
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}